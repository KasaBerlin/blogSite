{"version":3,"sources":["components/Home.js","components/ShowSinglePost.js","components/ShowAllPosts.js","App.js","serviceWorker.js","index.js"],"names":["Home","withRouter","props","userInput","React","createRef","titleInput","commentInput","onSubmit","e","preventDefault","user","current","value","trim","title","comment","addPost","currentTarget","reset","history","push","type","ref","required","rows","cols","className","titleStyle","borderRight","paddingRight","usernameStyle","color","textTransform","textDecorationLine","dateStyle","borderLeft","paddingLeft","ShowAllPosts","Object","keys","items","sort","a","b","uuid","map","i","style","onClick","handleClick","bind","showing","date","removePost","App","getPost","key","defaultValue","localStorage","getItem","post","Date","toLocaleString","setState","state","postList","addH2AndSort","location","pathname","emptyPostList","length","isAuthed","storageKey","posted","JSON","parse","this","savePost","stringify","setItem","console","log","to","exact","path","component","render","Component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bd6c42b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Home = () => (\n  <div>\n    <h1>Welcome to our blog site</h1>\n  </div>\n);\n\nexport default Home;\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst ShowSinglePost = props => {\n  // create a ref Object, access with current\n  const userInput = React.createRef();\n  const titleInput = React.createRef();\n  const commentInput = React.createRef();\n  // console.log(userInput);\n  const handleSubmit = e => {\n    e.preventDefault();\n    const user = userInput.current.value.trim();\n    const title = titleInput.current.value.trim();\n    const comment = commentInput.current.value.trim();\n    props.addPost(user, title, comment);\n    e.currentTarget.reset();\n\n    props.history.push(\"/showallposts\");\n  };\n\n  // When a ref is passed to an element in render,\n  // a reference to the node becomes accessible at the current attribute of the ref.\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>Username:</label>\n        <input\n          type=\"text\"\n          ref={userInput}\n          /* call the ref with the 'ref' attribute */ required\n        ></input>\n        <br />\n        <label>Title:</label>{\" \"}\n        <input type=\"text\" ref={titleInput} required></input>\n        <br />\n        <label>Content:</label>\n        <textarea rows=\"5\" cols=\"90\" ref={commentInput} required></textarea>\n        <br />\n        <button type=\"submit\">\n          <i className=\"fas fa-envelope-open-text\"></i>\n        </button>\n        <br />\n      </form>\n    </div>\n  );\n};\n\nexport default withRouter(ShowSinglePost);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import Sorting from \"./Sorting\";\n\nconst ShowAllPosts = props => {\n  // filterBlog = () => ();\n  return (\n    <div>\n      {/* <Sorting></Sorting> */}\n      {Object.keys(props.items)\n        .sort((a, b) => a.uuid > b.uuid)\n        .map((uuid, i) => {\n          uuid = props.items[uuid].uuid;\n          return (\n            <div className=\"post\">\n              <p className=\"title\">\n                {\" \"}\n                <span style={titleStyle}>{props.items[uuid].title}</span>{\" \"}\n              </p>\n              <button\n                className=\"read\"\n                onClick={props.handleClick.bind(this, uuid)}\n              >\n                open...\n              </button>\n              {props.items[uuid].showing ? (\n                <p className=\"comment\">{props.items[uuid].comment}</p>\n              ) : null}\n              <p className=\"userdate\">\n                <span style={usernameStyle}>{props.items[uuid].user}</span>{\" \"}\n                <span style={dateStyle}>{props.items[uuid].date}</span>{\" \"}\n                <button\n                  className=\"remove\"\n                  onClick={props.removePost.bind(this, uuid)}\n                >\n                  remove\n                </button>\n              </p>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\n// PropTypes\nShowAllPosts.propTypes = {\n  items: PropTypes.object.isRequired\n};\n\n//Styles\nconst titleStyle = {\n  borderRight: \"1px solid rgba(255, 0, 180, 0.5)\",\n  paddingRight: \"3px\"\n};\n\nconst usernameStyle = {\n  color: \"salmon\",\n  textTransform: \"uppercase\",\n  textDecorationLine: \"overline\"\n};\nconst dateStyle = {\n  color: \"rgba(248, 148, 6, 1)\",\n  borderLeft: \"1px solid tomato\",\n  paddingLeft: \"3px\"\n};\n\nexport default ShowAllPosts;\n","import React from \"react\";\nimport \"./App.css\";\nimport uuid from \"uuid/v4\";\n\nimport Home from \"./components/Home\";\nimport ShowSinglePost from \"./components/ShowSinglePost\";\nimport ShowAllPosts from \"./components/ShowAllPosts\";\n\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport { withRouter } from \"react-router-dom\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.storageKey = \"blogpost-list\";\n    const posted = this.getPost(this.storageKey);\n    posted\n      ? (this.state = JSON.parse(posted))\n      : (this.state = {\n          postList: {}\n        });\n  }\n  componentDidUpdate() {\n    this.savePost(this.storageKey, JSON.stringify(this.state));\n  }\n\n  savePost(key, value) {\n    localStorage.setItem(key, value);\n  }\n\n  getPost = (key, defaultValue = null) => {\n    const value = localStorage.getItem(key);\n    return value != null ? value : defaultValue;\n  };\n\n  addPost = (user, title, comment) => {\n    const post = {\n      uuid: uuid(),\n      user: user,\n      title: title,\n      comment: comment,\n      date: new Date().toLocaleString(),\n      showing: false\n    };\n    this.setState(state => {\n      state.postList[post.uuid] = post;\n      return state;\n    });\n  };\n\n  removePost = uuid => {\n    this.setState(state => {\n      delete state.postList[uuid];\n      return state;\n    });\n  };\n\n  addH2AndSort = () =>\n    this.props.history.location.pathname === \"/showallposts\" ? (\n      <h2 className=\"hello\">Good morning Developers!</h2>\n    ) : null;\n\n  emptyPostList = () =>\n    Object.keys(this.state.postList).length === 0 ? (\n      <h2 className=\"nopost\">No posts yet!</h2>\n    ) : (\n      <ShowAllPosts\n        items={this.state.postList}\n        handleClick={this.handleClick}\n        removePost={this.removePost}\n        isAuthed={true}\n      />\n    );\n\n  handleClick = uuid => {\n    this.setState(state => {\n      state.postList[uuid].showing = !state.postList[uuid].showing;\n      return state;\n    });\n  };\n\n  render() {\n    console.log(this.props.history.location.pathname);\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <nav>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/create\">Create A Post</Link>\n            <Link to=\"/showallposts\">Show Current Post</Link>\n            {this.addH2AndSort()}\n          </nav>\n        </header>\n        <div className=\"content\">\n          <Switch>\n            <Route exact path=\"/blogSite\" component={Home}></Route>\n            <Route\n              path=\"/create\"\n              render={props => (\n                <ShowSinglePost addPost={this.addPost} isAuthed={true} />\n              )}\n            ></Route>\n            <Route\n              path=\"/showallposts\"\n              render={props => this.emptyPostList()}\n            ></Route>\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}