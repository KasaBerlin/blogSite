{"version":3,"sources":["components/Home.js","components/ShowSinglePost.js","components/ShowAllPosts.js","App.js","serviceWorker.js","index.js"],"names":["Home","withRouter","props","userInput","React","createRef","titleInput","commentInput","onSubmit","e","user","current","value","trim","title","comment","addPost","history","push","type","ref","required","rows","cols","className","titleStyle","borderRight","paddingRight","usernameStyle","color","textTransform","textDecorationLine","dateStyle","borderLeft","paddingLeft","ShowAllPosts","Object","keys","items","sort","a","b","uuid","map","i","key","style","onClick","openPost","bind","showing","date","removePost","App","post","Date","toLocaleString","setState","state","postList","getPost","defaultValue","localStorage","getItem","emptyPostList","length","isAuthed","addWelcome","location","pathname","storageKey","posted","JSON","parse","setItem","this","stringify","to","exact","path","component","render","Component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9dd5231f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Home = () => (\n  <div>\n    <h1>Welcome to our blog site</h1>\n  </div>\n);\n\nexport default Home;\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst ShowSinglePost = props => {\n  // create a ref Object, access with current\n  const userInput = React.createRef();\n  const titleInput = React.createRef();\n  const commentInput = React.createRef();\n  \n  const handleSubmit = e => {\n    const user = userInput.current.value.trim();\n    const title = titleInput.current.value.trim();\n    const comment = commentInput.current.value.trim();\n    props.addPost(user, title, comment);\n\n    props.history.push(\"/showallposts\");\n  };\n\n  // When a ref is passed to an element in render,\n  // a reference to the node becomes accessible at the current attribute of the ref.\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>Username:</label>\n        <input\n          type=\"text\"\n          ref={userInput}\n          /* call the ref with the 'ref' attribute */ required\n        ></input>\n        <br />\n        <label>Title:</label>{\" \"}\n        <input type=\"text\" ref={titleInput} required></input>\n        <br />\n        <label>Content:</label>\n        <textarea rows=\"5\" cols=\"90\" ref={commentInput} required></textarea>\n        <br />\n        <button type=\"submit\">\n          <i className=\"fas fa-envelope-open-text\"></i>\n        </button>\n        <br />\n      </form>\n    </div>\n  );\n};\n\nexport default withRouter(ShowSinglePost);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ShowAllPosts = props => {\n  return (\n    <div>\n      {Object.keys(props.items)\n        .sort((a, b) => a.uuid > b.uuid)\n        .map((uuid, i) => {\n          uuid = props.items[uuid].uuid;\n          return (\n            <div key={i} className=\"post\">\n              <p className=\"title\">\n                {\" \"}\n                <span style={titleStyle}>{props.items[uuid].title}</span>{\" \"}\n              </p>\n              <button\n                className=\"read\"\n                onClick={props.openPost.bind(this, uuid)}\n              >\n                open...\n              </button>\n              {props.items[uuid].showing ? (\n                <p className=\"comment\">{props.items[uuid].comment}</p>\n              ) : null}\n              <p className=\"userdate\">\n                <span style={usernameStyle}>{props.items[uuid].user}</span>{\" \"}\n                <span style={dateStyle}>{props.items[uuid].date}</span>{\" \"}\n                <button\n                  className=\"remove\"\n                  onClick={props.removePost.bind(this, uuid)}\n                >\n                  remove\n                </button>\n              </p>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\n// PropTypes\nShowAllPosts.propTypes = {\n  items: PropTypes.object.isRequired\n};\n\n//Styles\nconst titleStyle = {\n  borderRight: \"1px solid rgba(255, 0, 180, 0.5)\",\n  paddingRight: \"3px\"\n};\n\nconst usernameStyle = {\n  color: \"salmon\",\n  textTransform: \"uppercase\",\n  textDecorationLine: \"overline\"\n};\n\nconst dateStyle = {\n  color: \"rgba(248, 148, 6, 1)\",\n  borderLeft: \"1px solid tomato\",\n  paddingLeft: \"3px\"\n};\n\nexport default ShowAllPosts;\n","import React from \"react\";\nimport { Route, Switch, Link, Redirect, withRouter } from \"react-router-dom\";\n\nimport uuid from \"uuid/v4\";\n\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport ShowSinglePost from \"./components/ShowSinglePost\";\nimport ShowAllPosts from \"./components/ShowAllPosts\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.storageKey = \"blogpost-list\";\n    const posted = this.getPost(this.storageKey);\n    posted\n      ? (this.state = JSON.parse(posted))\n      : (this.state = {\n          postList: {}\n        });\n  }\n\n  addPost = (user, title, comment) => {\n    const post = {\n      uuid: uuid(),\n      user: user,\n      title: title,\n      comment: comment,\n      date: new Date().toLocaleString('en-GB'),\n      showing:false\n    };\n    this.setState(state => {\n      state.postList[post.uuid] = post;\n    });\n  };\n  \n// local storage only handles string key/value pairs\n  componentDidUpdate() {\n    //savePost (key,value)\n    localStorage.setItem(this.storageKey, JSON.stringify(this.state));\n  }\n\n  getPost = (key, defaultValue = null) => {\n    const value = localStorage.getItem(key);\n    return value != null ? value : defaultValue;\n  };\n\n  removePost = uuid => {\n    this.setState(state => {\n      delete state.postList[uuid];\n      return state;\n    });\n  };\n\n  openPost = uuid => {\n    this.setState(state => {\n      state.postList[uuid].showing = !state.postList[uuid].showing;\n      return state;\n      });\n    };\n\n  emptyPostList = () =>{\n    return Object.keys(this.state.postList).length === 0 ? (\n      <h2 className=\"nopost\">No posts yet!</h2>\n      ) : (\n        <ShowAllPosts\n        items={this.state.postList}\n        openPost={this.openPost}\n        removePost={this.removePost}\n        isAuthed={true}\n        />\n        )};\n               \n  addWelcome = () =>\n    this.props.history.location.pathname === \"/showallposts\" ? (\n    <h2 className=\"hello\">Good morning Developers!</h2>\n    ) : null;\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <nav>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/create\">Create A Post</Link>\n            <Link to=\"/showallposts\">Show Current Post</Link>\n            {this.addWelcome()}\n          </nav>\n        </header>\n        <div className=\"content\">\n          <Switch>\n            <Route exact path=\"/\" component={Home}></Route>\n            <Route\n              path=\"/create\"\n              render={props => (\n                <ShowSinglePost addPost={this.addPost} isAuthed={true} />\n                )}\n            ></Route>\n            <Route\n              path=\"/showallposts\"\n              // function will be called when the location matches\n              render={props => this.emptyPostList()}\n            ></Route>\n                <Redirect to='/'/>\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {HashRouter} from \"react-router-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n<HashRouter>\n<App />\n</HashRouter>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}